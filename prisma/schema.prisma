datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id      String @id @default(uuid())
  email   String @unique
  clerkId String @unique
  posts   Post[]
  Like    Like[]
}

model Post {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String
  title          String
  description    String         @db.Text
  userId         String
  uniqueId       String?        
  delivery       Boolean?
  price          Float?
  city           String?
  hood           String?
  phone          String?
  instagram      String?
  facebook       String?
  tikTok         String?
  promotion      PromotionType?
  latitude       Float?
  longitude      Float?
  categoryName   String
  category       Category       @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  subcategories  Subcategory[]  @relation("PostSubcategories")
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl       Image[]
  likes          Like[]
  payments       Payment[]

  @@index([userId, id])
  @@index([categoryName])
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Image {
  id     String  @id @default(cuid())
  url    String
  postId String?
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  Post          Post[]
  subcategories Subcategory[]
  blogs         Blog[]
}

model Subcategory {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  posts      Post[]     @relation("PostSubcategories")

  @@index([categoryId])
}

model Blog {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String           // H1 title
  slug            String           @unique
  metaTitle       String
  metaDescription String
  introduction    String           @db.Text // H3 introduction
  categoryName    String
  category        Category         @relation(fields: [categoryName], references: [name])
  publishedAt     DateTime?
  tocItems        TableOfContents[]
  contentSections ContentSection[]
  faqs            FAQ[]
  conclusion      String           @db.Text
  images          BlogImage[]      // New field for blog images

  @@index([categoryName])
  @@index([publishedAt])
}

model BlogImage {
  id     String @id @default(uuid())
  url    String
  alt    String
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId])
}

model TableOfContents {
  id     String @id @default(uuid())
  title  String
  order  Int
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId])
}

model ContentSection {
  id      String @id @default(uuid())
  title   String // H2 title
  content String @db.Text
  order   Int
  blogId  String
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId])
}

model FAQ {
  id       String @id @default(uuid())
  question String // H3 question
  answer   String @db.Text
  order    Int
  blogId   String
  blog     Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId])
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String   // Store hashed passwords only!
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            Int           @id @default(autoincrement())
  postId        String
  post          Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  amount        Float
  paymentMethod PaymentMethod

  @@index([postId])
}

enum PromotionType {
  SILVER
  GOLD
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}
